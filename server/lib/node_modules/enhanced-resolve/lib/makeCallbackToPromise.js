"use strict";
//将带有同步和异步接口的转换
module.exports = function (input, except) {
  if (typeof input != "object") {
    return;
  }
  var keys = Object.keys(input);
  var syncFunc = [];
  keys.forEach((key) => {
    if (/Sync$/.test(key)) {
      syncFunc.push(key);
    }
  })
  syncFunc.forEach((key) => {

    var asyncFunc = key.replace(/Sync$/, "");
    //排除
    if (except && ~except.indexOf(asyncFunc)) {
      return;
    }
    var inner = input[asyncFunc];

    if (inner) {
      input[asyncFunc] = function (...args) {

        let argLen = args.length;

        return new Promise((resove,reject) => {
          let callback;
          if (typeof args[argLen - 1] == "function") {
            callback = args[argLen - 1];
            args[argLen - 1] = function (err, ret) {
              callback(err, ret);
              if(err){
                reject(err);
                return;
              }
              resove(ret);
            }
          } else {
            callback = function(err,ret){
              if(err){
                reject(err);
                return;
              }
              resove(ret);
            }

          }
          inner.apply(input, args);
        })
      }
    }
  })
}

var obj = {
  wake: function (params, callback) {
    setTimeout(()=>{
      callback(null, params)
    },10)
  },
  wakeSync: function () { }
}

obj.wake("www", (err, pa) => {
  expect(err).toBeNull();
  expect(pa).toBe("www");
});

makeCallbackToPromise(obj)

obj.wake("www").then(pa => { expect(pa).toBe("www"); });

obj.wake("www",function(){
  throw "err"
}).catch(e=>{
  expect(e.message).toBe("err");
})