"use strict";

const toReg = require("enhanced-resolve/lib/toReg");

//获取code和arg的字符串
//每一个await必须单独占一行
function getArgAndCode(fn) {

  var str = fn.toString();
  let code = "";
  let arg = "";

  var objectFunctionReg = /^\s*(async)?(\s*function\s*\([^\)]*\))\s*\{([\u0000-\uFFFF]*)\}$/igm;
  var objectArrowReg = /^\s*(async)?(\s*\([^\)]*\))\s*=>\s*\{([\u0000-\uFFFF]*)\}$/igm;
  var normal = /^\s*(async)?(\s*[^\{]*)\{([\u0000-\uFFFF]*)\}$/igm;
  var matchReg;
  if (objectFunctionReg.test(str)) {
    // async function({b}){}

    objectFunctionReg.lastIndex = 0;
    matchReg = objectFunctionReg;
  } else if (objectArrowReg.test(str)) {
    // async ({b,a})=>{}
    // async (a,b)=>{}
    objectArrowReg.lastIndex = 0;
    matchReg = objectArrowReg;
  } else {
    // async a=>{}

    matchReg = normal;
  }

  str.replace(matchReg, function(m, m1, m2,m3) {

    if (m2.indexOf("=>") != -1) {
      arg = m2.replace(/^[^\(]+\(([\u0000-\uFFFF]*)\)\s*=>\s*$/, "$1");
    } else {
      arg = m2.replace(/^[^\(]+\(([\u0000-\uFFFF]*)\)\s*$/, "$1");
    }

    code = m3;
  });

  if (code == "" || str == code) {
    throw Error("can not find async function!");
  }

  return [code,arg];
}
function replaceObject(argStr){
  argStr = argStr.replace(/\{[^\}]*\}/g,"a").replace(/\[[^\]]*\]/g,"a");
  if(/\{[^\}]*\}/.test(argStr)||/\[[^\]]*\]/g.test(argStr)){
    return replaceObject(argStr)
  }
  return argStr;
}
//获取arg的长度
function getArgLen(argStr){
  argStr = replaceObject(argStr);
  return argStr.split(",").length;
}

module.exports = {
  getArgAndCode,
  getArgLen,
}