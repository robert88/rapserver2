"use strict";

const toReg = require("./toReg.js");

const { getArgAndCode} = require("./codeParse.js")

function makeSyncFunc (fn, replaceKeyWords,context,contextName) {

  var strInfo = getArgAndCode(fn);

  let code = strInfo[0];

  let arg = strInfo[1];

  //手动替换
  if (replaceKeyWords) {
    if (typeof replaceKeyWords == "object") {
      replaceKeyWords.forEach(keyword => {
        code = code.replace(new RegExp(toReg.call(keyword), "g"), keyword);
      })
    } else {
      code = code.replace(new RegExp(toReg.call(replaceKeyWords), "g"), replaceKeyWords );
    }

  }

  //自动替换
  
  code = code.replace(/\\"/gm,"#makeSyncFunc_quote#").replace(/"[^"]*?"/g, function(m){return m.replace(/async/,"#makeSyncFunc_keyword#")}).replace(/#makeSyncFunc_quote#/gm,'\\"');

  code = code.replace(/\\'/gm,"#makeSyncFunc_quote#").replace(/'[^"]*?'/g, function(m){return m.replace(/async/,"#makeSyncFunc_keyword#")}).replace(/#makeSyncFunc_quote#/gm,"\\'");

  
  code = code.replace(/\\"/gm,"#makeSyncFunc_quote#").replace(/"[^"]*?"/g, function(m){return m.replace(/await/,"#makeAwaitFunc_keyword#")}).replace(/#makeSyncFunc_quote#/gm,'\\"');

  code = code.replace(/\\'/gm,"#makeSyncFunc_quote#").replace(/'[^"]*?'/g, function(m){return m.replace(/await/,"#makeAwaitFunc_keyword#")}).replace(/#makeSyncFunc_quote#/gm,"\\'");

  code = code.replace(/(\b)await(\s*[^\(]+)\]\(/igm, '$1$2+"Sync"](');

  code = code.replace(/(\b)await(\s*[^\(]+)\(/igm, "$1$2Sync(");

  code = code.replace(/(\b)async(\b)/g, "$1$2");

  code = code.replace(/#makeSyncFunc_keyword#/g, "async");
  code = code.replace(/#makeAwaitFunc_keyword#/g, "await");
  if(typeof context=="object" && typeof contextName =="object" ){
    return new Function(contextName,`return function(${arg}){${code}}`).apply(null,context);
  }else{
    return new Function(`return function(${arg}){${code}}`)();
  }


}

module.exports = makeSyncFunc;

