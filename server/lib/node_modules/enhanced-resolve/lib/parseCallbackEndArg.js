"use strict";
// let {path, fileType, deep, callback} =  parseCallbackEndArg(arguments,"path, fileType, deep, callback","boolean,function");
function parseCallbackEndArg(arg, argString, types) {

  let ret = {};

  argString = argString.replace(/\s+/g, "").split(",");

  types = types || "function";

  types = types.replace(/\s+/g, "").split(",");

  let len = arg.length;

  let argStringLen = argString.length

  let typesLen = types.length;
  let backLen = typesLen;

  //参数比较少的时候
  if (len < argStringLen) {
    while (typesLen > 0) {
      len = arg.length
	  let tempLen = len;
	  //需要偏移，后一位已经匹配过了，就不需要在匹配
      let backSpace = backLen - typesLen;
      while (tempLen--) {
        let space = len - tempLen;
        //argString已经被删除了
        argStringLen = argString.length;

        if (typeof arg[tempLen] == types[typesLen - 1]) {
          ret[argString[argStringLen - space - backSpace]] = arg[tempLen];
          argString.splice(argStringLen - space - backSpace, 1);
		  arg.splice(tempLen, 1);
		  //不需要偏移
		  backLen--;
        }
      }
      typesLen--;
    }
  }

  //剩下的自动匹配
  arg.forEach((a, i) => {
    ret[argString[i]] = a;
  });

  return ret;
}



module.exports = parseCallbackEndArg;