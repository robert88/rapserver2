"use strict";

const toReg = require("enhanced-resolve/lib/toReg");
const { getArgAndCode} = require("./getFuncArguments.js")
//每一个await必须单独占一行
module.exports = function(fn, replaceKeyWords) {
  var strInfo = getArgAndCode(fn);

  let code = strInfo[0];

  let arg = strInfo[1];

  code = code.replace(/\\"/gm,"#makeSyncFunc_quote#").replace(/"[^"]+"/g, function(m){return m.replace(/async/,"#makeSyncFunc_keyword#")}).replace(/#makeSyncFunc_quote#/gm,'\\"');

  code = code.replace(/\\'/gm,"#makeSyncFunc_quote#").replace(/'[^']+'/g, function(m){return m.replace(/async/,"#makeSyncFunc_keyword#")}).replace(/#makeSyncFunc_quote#/gm,"\\'");
  
  code = code.replace(/\\"/gm,"#makeSyncFunc_quote#").replace(/"[^"]+"/g, function(m){return m.replace(/await/,"#makeAwaitFunc_keyword#")}).replace(/#makeSyncFunc_quote#/gm,'\\"');

  code = code.replace(/\\'/gm,"#makeSyncFunc_quote#").replace(/'[^']+'/g, function(m){return m.replace(/await/,"#makeAwaitFunc_keyword#")}).replace(/#makeSyncFunc_quote#/gm,"\\'");

  //自动替换
  var wapTime = 0;
  code = code.replace(/(\n|\r)([^\n\r]*?\b)await(\s*[^\(]+\]\()([^\n\r]*?\);?\s*)(\n|\r)/igm, function(m, m1, m2, m3, m4, m5) {
    wapTime++;
    m4 = m4.replace(")","");
    return m1 + m3 + "function(__error__,__result__){if(__error__){throw __error__;}" + m2 + "__result__" +m4+ m5;
  });
  for (var i = 0; i < wapTime; i++) {
    code += "})";
  }

  wapTime = 0;
  code = code.replace(/(\n|\r)([^\n\r]*?\b)await(\s*[^\(]+\()([^\n\r]*?\)[^\n\r\)]*?)(\n|\r)/igm, function(m, m1, m2, m3, m4, m5) {
    wapTime++;
    m4 = m4.replace(")","");
    return m1 + m3 + "function(__error__,__result__){if(__error__){throw __error__;}" + m2 + "__result__" + m4+m5;
  });
  for (var i = 0; i < wapTime; i++) {
    code += "})";
  }

  //匹配内部定义的async函数，注意参数为空的时候
  code = code.replace(/(\b)async(\s+[^\(]+\()([^\{]*\{)/gm, (m,m1,m2,m3)=>{
    return m1+m2+"__buildAsyncError__"+(/^\)/.test(m3.replace(/\s+/g,""))?m3:(","+m3))+"if(__error__){throw __error__;}"
  })

  code = code.replace(/#makeSyncFunc_keyword#/g, "async");
  code = code.replace(/#makeSyncFunc_keyword#/g, "async");
  code = code.replace(/#makeAwaitFunc_keyword#/g, "await");

  return new Function(`return function(__error__${arg?(','+arg):arg}){if(__error__){throw __error__;} ${code}}`)();

}

