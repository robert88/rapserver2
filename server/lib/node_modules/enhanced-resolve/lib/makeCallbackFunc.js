"use strict";

const toReg = require("enhanced-resolve/lib/toReg");
//每一个await必须单独占一行
module.exports = function(fn, replaceKeyWords) {

  var str = fn.toString();
  let code = "";
  let arg = "";

  var objectFunctionReg = /^\s*async(\s*function\s*\([^\)]*\))\s*\{([\u0000-\uFFFF]*)\}$/igm;
  var objectArrowReg = /^\s*async(\s*\([^\)]*\))\s*=>\s*\{([\u0000-\uFFFF]*)\}$/igm;
  var normal = /^\s*async(\s*[^\{]*)\{([\u0000-\uFFFF]*)\}$/igm;
  var matchReg;
  if (objectFunctionReg.test(str)) {
    // async function({b}){}

    objectFunctionReg.lastIndex = 0;
    matchReg = objectFunctionReg;
  } else if (objectArrowReg.test(str)) {
    // async ({b,a})=>{}
    // async (a,b)=>{}
    objectArrowReg.lastIndex = 0;
    matchReg = objectArrowReg;
  } else {
    // async a=>{}

    matchReg = normal;
  }

  str.replace(matchReg, function(m, m1, m2) {

    if (m1.indexOf("=>") != -1) {
      arg = m1.replace(/^[^\(]+\(([\u0000-\uFFFF]*)\)\s*=>\s*$/, "$1");
    } else {
      arg = m1.replace(/^[^\(]+\(([\u0000-\uFFFF]*)\)\s*$/, "$1");
    }

    code = m2;
  });

  if (code == "" || str == code) {
    throw Error("can not find async function!");
  }

  code = code.replace(/\\"/gm,"#makeSyncFunc_quote#").replace(/"[^"]+"/g, function(m){return m.replace(/async/,"#makeSyncFunc_keyword#")}).replace(/#makeSyncFunc_quote#/gm,'\\"');

  code = code.replace(/\\'/gm,"#makeSyncFunc_quote#").replace(/'[^']+'/g, function(m){return m.replace(/async/,"#makeSyncFunc_keyword#")}).replace(/#makeSyncFunc_quote#/gm,"\\'");

  
  code = code.replace(/\\"/gm,"#makeSyncFunc_quote#").replace(/"[^"]+"/g, function(m){return m.replace(/await/,"#makeAwaitFunc_keyword#")}).replace(/#makeSyncFunc_quote#/gm,'\\"');

  code = code.replace(/\\'/gm,"#makeSyncFunc_quote#").replace(/'[^']+'/g, function(m){return m.replace(/await/,"#makeAwaitFunc_keyword#")}).replace(/#makeSyncFunc_quote#/gm,"\\'");

  //自动替换
  var wapTime = 0;
  code = code.replace(/(\n|\r)([^\n\r]*?\b)await(\s*[^\(]+\]\()([^\n\r]*?\);?\s*)(\n|\r)/igm, function(m, m1, m2, m3, m4, m5) {
    wapTime++;
    m4 = m4.replace(")","");
    return m1 + m3 + "function(__error__,__result__){if(__error__){throw __error__;}" + m2 + "__result__" +m4+ m5;
  });
  for (var i = 0; i < wapTime; i++) {
    code += "})";
  }

  wapTime = 0;
  code = code.replace(/(\n|\r)([^\n\r]*?\b)await(\s*[^\(]+\()([^\n\r]*?\)[^\n\r\)]*?)(\n|\r)/igm, function(m, m1, m2, m3, m4, m5) {
    wapTime++;
    m4 = m4.replace(")","");
    return m1 + m3 + "function(__error__,__result__){if(__error__){throw __error__;}" + m2 + "__result__" + m4+m5;
  });
  for (var i = 0; i < wapTime; i++) {
    code += "})";
  }

  //匹配内部定义的async函数，注意参数为空的时候
  code = code.replace(/(\b)async(\s+[^\(]+\()([^\{]*\{)/gm, (m,m1,m2,m3)=>{
    return m1+m2+"__buildAsyncError__"+(/^\)/.test(m3.replace(/\s+/g,""))?m3:(","+m3))+"if(__error__){throw __error__;}"
  })

  code = code.replace(/#makeSyncFunc_keyword#/g, "async");
  code = code.replace(/#makeSyncFunc_keyword#/g, "async");
  code = code.replace(/#makeAwaitFunc_keyword#/g, "await");

  return new Function(`return function(__error__${arg?(','+arg):arg}){if(__error__){throw __error__;} ${code}}`)();

}

