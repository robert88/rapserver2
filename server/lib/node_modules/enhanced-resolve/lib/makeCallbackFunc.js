"use strict";

const toReg = require("enhanced-resolve/lib/toReg");
const { getArgAndCode} = require("./getFuncArguments.js");

//获取代码闭合区间}，如let a={};}} 得到是第二个}的索引
function findNextQuota(str,Q){
  Q = Q||"}"
  let quotaIndexs = [];
  str.replace(/\{|\}/g,(m,idx)=>{quotaIndexs.push({index:idx,s:m})});
  let offset = 0;
  for(let i=0;i<quotaIndexs.length;i++){
    if(offset<=0&&quotaIndexs[i].s==Q){
      return quotaIndexs[i].index;
    }else if(quotaIndexs[i].s==Q){
      offset--;
    }else{
      offset++;
    }
  }
  quotaIndexs = null;
  return str.length-1;
}

function replaceAwait(code){
 var codes =  code.split(/(\n|\r)+/);
 var newCodes = [];
 codes.forEach(d=>{
   d = d.replace(/^\s+|\s+$/g,"").replace(/\s+/g," ");
   if(d){
    newCodes.push(d);
   }
 })
 code = newCodes.join("\n");

  code.replace(/(.*\b)await(\b[^\(]+\()(.*)/m, function(m, m1, m2,m3) {

    var leftOffset = checkLeftOpa(m1)
    var leftM1 = m1.slice(0,leftOffset);
    var rightM1 = m1.slice(leftOffset,m1.length);
   var nextCloseIndex =  findNextQuota(m3)
   var leftM3 = m1.slice(0,nextCloseIndex);
   var rightM3 = m1.slice(nextCloseIndex,m3.length);
   //提取声明
   rightM1.replace(/var\s[A-Za-z0-9_$]+(,\s*[A-Za-z0-9_$]+\s*([^\S,;]){0}){0}/,function(t){

   })
  });
}

function checkLeftOpa(m1){
  let len = m1.length;
  var opa = /=\+\-%\~\^\*\/\?:&|/
  let offset;
  while(len--){

    //将字符串排除
    if((m1[len]=="'"||m1[len]=='"')&&m1[len-1]!="\\"){
      if(m1[len]==offset){
        offset=""
      }else{
        offset==m1[len];
      }
    }
    if(offset){
      continue;
    }

    //匹配到结束语句
    if(m1[len]==";"||m1[len]==","||m1[len]=="}"||m1[len]=="{"){
      return len;
    }
    if(m1[len]=="\n"&&!opa.test(m1[len-1])){
      return len;
    }
  }
  return 0;
}

//每一个await必须单独占一行
module.exports = function(fn, replaceKeyWords) {

  var strInfo = getArgAndCode(fn);

  let code = strInfo[0];

  let arg = strInfo[1];

  code = code.replace(/\\"/gm,"#makeSyncFunc_quote#").replace(/"[^"]+"/g, function(m){return m.replace(/await/,"#makeAwaitFunc_keyword#").replace(/async/,"#makeSyncFunc_keyword#").replace(/\{/,"#make_left_quito#").replace(/\}/,"#make_right_quito#")}).replace(/#makeSyncFunc_quote#/gm,'\\"');

  code = code.replace(/\\'/gm,"#makeSyncFunc_quote#").replace(/'[^']+'/g, function(m){return m.replace(/await/,"#makeAwaitFunc_keyword#").replace(/async/,"#makeSyncFunc_keyword#").replace(/\{/,"#make_left_quito#").replace(/\}/,"#make_right_quito#")}).replace(/#makeSyncFunc_quote#/gm,"\\'");
  
  //自动替换,声明式调用
  var wapTime = 0;

  var insertClose=[];

  code = code.split(/\bawait\b/);

  //得到分段闭合区间的数据
 code.replace(/(\b?)await([^\(]+\()([\u0000-\uFFFF]*)\)/igm, function(m, m1, m2, m3, m4, m5,index) {
    // m1是回车，m2是await前面的代码,m3是await后面代码到(这个的位置，m4是(这个位置到回车的位置，m5是回车
    //m4会多一根)

    //应该从await开始算起
    let left = (m1+m2).length;

    let nextStr = code.slice(index+left,code.length);

    //找到它的闭合区间
    insertClose.push(findNextQuota(nextStr));

  });
  insertClose.sort((a,b)=>{return a-b<0?-1:1})
  let start = 0;
  let splitCode =[];
  insertClose.push(code.length);
  insertClose.forEach((val,idx)=>{
    splitCode.push(code.slice(start,val));
    start = val;
  });

  code = splitCode.join("})")

  code = code.replace(/(\n|\r)([^\n\r]*?\b)await(\s*[^\(]+\()([^\n\r]*?\)[^\n\r\)]*?)(\n|\r)/igm, function(m, m1, m2, m3, m4, m5,index) {
    // m1是回车，m2是await前面的代码,m3是await后面代码到(这个的位置，m4是(这个位置到回车的位置，m5是回车
    //m4会多一根)
    m4 = m4.replace(")","");
    return m1 + m3 + "function(__error__,__result__){if(__error__){throw __error__;}" + m2 + "__result__" + m4+m5;
  });
  // for (var i = 0; i < wapTime; i++) {
  //   code += "})";
  // }

  //匹配内部定义的async函数，注意参数为空的时候
  code = code.replace(/(\b)async(\s+[^\(]+\()([^\{]*\{)/gm, (m,m1,m2,m3)=>{
    return m1+m2+"__buildAsyncError__"+(/^\)/.test(m3.replace(/\s+/g,""))?m3:(","+m3))+"if(__error__){throw __error__;}"
  })

  code = code.replace(/#makeSyncFunc_keyword#/g, "async");
  code = code.replace(/#makeSyncFunc_keyword#/g, "async");
  code = code.replace(/#makeAwaitFunc_keyword#/g, "await");
  code = code.replace(/#make_left_quito#/g, "{");
  code = code.replace(/#make_right_quito#/g, "}");
  //得到一个带error的function
  return new Function(`return function(__error__${arg?(','+arg):arg}){if(__error__){throw __error__;} ${code}}`)();

}

let a1 = async function({parama:{},paramb}){

  if(!await atesta(paap)){
    let t = await btestb(pbbp);
    if(!await ctestc(pccp)){
      let t = await dtestd(pddp)&&await eteste(peep);
    }
  }

}
var t = module.exports(a1.toString()).toString().replace(/\s+/g,"");