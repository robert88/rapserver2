"use strict";

const { 
  getArgAndCode,
  formatSpace,
  removeNote,
  findLeftOffsetByExpression,
  findRightOffsetByStatement,
  matchAndOrExcepssion,
  findLeftOffsetByString
} = require("enhanced-resolve/lib/codeParse");



function replaceAwait(code,d) {
  d = d || {count:0};
  //{var d=2;let a,b = await go(a,b);GO();}{console.log(1)}
  code = code.replace(/^([\u0000-\uFFFF]*?\b)await(\b[^\(]+\()([\u0000-\uFFFF]*)/m, function(m, m1, m2, m3) {

    d.count++;

    //m1="{var d=2;let a,b = "  m2=" go("  m3="a,b);GO();}{console.log(1)}"
    var m1Leftoffset =  findLeftOffsetByExpression(m1);

    var m1Left = m1.slice(0, m1Leftoffset+1);
    var m1Right = m1.slice(m1Leftoffset+1, m1.length);
    //m1Left="{var d=2;"  m1Right="let a,b = "
    //提取声明
    var statement = findRightOffsetByStatement(m1Right);
    //statement={code:" a,b = ",state:"let a,b;"}

    var m3Leftoffset = findLeftOffsetByString(m3, ")","(");
    var m3Left = m3.slice(0, m3Leftoffset).replace(/\s+/, "");
    var m3Right = m3.slice(m3Leftoffset+1, m3.length);//去掉）
    //m3Left="a,b" m3Right=";GO();}{console.log(1)}"
    if (m3Left) {
      m3Left = m3Left + ","
      //leftM3="a,b,"
    }
    let m4 = m3Right;
    //m4="";GO();}{console.log(1)}""
    var m4Leftoffset = findLeftOffsetByString(m4, "}","{");
    var m4Left = m4.slice(0, m4Leftoffset)
    var m4Right = m4.slice(m4Leftoffset, m4.length);//保留}
    //m4Left=";GO();"  m4Right="{console.log(1)}"

    let perCode = matchAndOrExcepssion(statement.code);

    let ret = m1Left + statement.state + perCode.code +m2 + m3Left + "function(__error__"+d.count+",__result__"+d.count+"){if(__error__"+d.count+"){throw __error__"+d.count+";}" + statement.code + "__result__"+d.count + m4Left + "})" +(perCode.needQ?")":"")+ m4Right;
  
    return ret;
  });
  if (/([\u0000-\uFFFF]*\b)await(\b[^\(]+\()([\u0000-\uFFFF]*)/m.test(code)) {
    return replaceAwait(code,d);
  }
  return code
}


module.exports = function(fn) {

  var strInfo = getArgAndCode(fn);

  let code = strInfo[0];

  let arg = strInfo[1];

  code = code.replace(/\\"/gm, "#makeSyncFunc_quote#").replace(/"[^"]+"/g, function(m) {
      return m
        .replace(/await/g, "#makeAwaitFunc_keyword#")
        .replace(/async/g, "#makeSyncFunc_keyword#")
        .replace(/\{/g, "#make_left_quito#")
        .replace(/\}/g, "#make_right_quito#")
        .replace(/\\/g, "#make_Slash#")
    })
    .replace(/#makeSyncFunc_quote#/gm, '\\"');

  code = code.replace(/\\'/gm, "#makeSyncFunc_quote#").replace(/'[^']+'/g, function(m) {
      return m
        .replace(/await/g, "#makeAwaitFunc_keyword#")
        .replace(/async/g, "#makeSyncFunc_keyword#")
        .replace(/\{/g, "#make_left_quito#")
        .replace(/\}/g, "#make_right_quito#")
        .replace(/\\/g, "#make_Slash#")
    })
    .replace(/#makeSyncFunc_quote#/gm, "\\'");

  code = formatSpace(code);

  code = removeNote(code);

  code = replaceAwait(code);

  //匹配内部定义的async函数，注意参数为空的时候
  code = code.replace(/(\b)async(\s+[^\(]+\()([^\{]*\{)/gm, (m, m1, m2, m3) => {
    return m1 + m2 + "__buildAsyncError__" + (/^\)/.test(m3.replace(/\s+/g, "")) ? m3 : ("," + m3)) + "if(__error__){throw __error__;}"
  })

  code = code.replace(/#makeSyncFunc_keyword#/g, "async");
  code = code.replace(/#makeSyncFunc_keyword#/g, "async");
  code = code.replace(/#makeAwaitFunc_keyword#/g, "await");
  code = code.replace(/#make_left_quito#/g, "{");
  code = code.replace(/#make_right_quito#/g, "}");
  code = code.replace(/#make_Slash#/g, "\\");
  //得到一个带error的function
  return new Function(`return function(__error__${arg?(','+arg):arg}){if(__error__){throw __error__;} ${code}}`)();

}

